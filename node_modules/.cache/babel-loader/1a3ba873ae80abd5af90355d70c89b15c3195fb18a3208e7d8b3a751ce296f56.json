{"ast":null,"code":"var _jsxFileName = \"/home/rosita/proyectos/nodeJS/gestortareas/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TaskList from './TaskList';\nimport TaskForm from './TaskForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // Cargar tareas desde localStorage si existen\n  const loadTasks = () => {\n    const savedTasks = JSON.parse(localStorage.getItem('tasks'));\n    return savedTasks ? savedTasks : []; // Si no hay tareas, devuelvo un array vacío\n  };\n  const [tasks, setTasks] = useState(loadTasks);\n\n  // Guardar las tareas en localStorage cada vez que el estado cambie\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks)); // Guarda el estado en localStorage\n  }, [tasks]);\n  const addTask = taskText => {\n    const newTask = {\n      id: Date.now(),\n      // Usamos el timestamp como ID único\n      text: taskText,\n      completed: false\n    };\n    setTasks(prevTasks => [...prevTasks, newTask]);\n  };\n  const toggleTaskCompletion = id => {\n    setTasks(prevTasks => prevTasks.map(task => task.id === id ? {\n      ...task,\n      completed: !task.completed\n    } : task));\n  };\n  const deleteTask = id => {\n    setTasks(prevTasks => prevTasks.filter(task => task.id !== id));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: tasks,\n      onToggle: toggleTaskCompletion,\n      onDelete: deleteTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"GA5ylSqeMRZSRep9YMINcvgZaeg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TaskList","TaskForm","jsxDEV","_jsxDEV","App","_s","loadTasks","savedTasks","JSON","parse","localStorage","getItem","tasks","setTasks","setItem","stringify","addTask","taskText","newTask","id","Date","now","text","completed","prevTasks","toggleTaskCompletion","map","task","deleteTask","filter","className","children","onAdd","fileName","_jsxFileName","lineNumber","columnNumber","onToggle","onDelete","_c","$RefreshReg$"],"sources":["/home/rosita/proyectos/nodeJS/gestortareas/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TaskList from './TaskList';\nimport TaskForm from './TaskForm';\n\nconst App = () => {\n  // Cargar tareas desde localStorage si existen\n  const loadTasks = () => {\n    const savedTasks = JSON.parse(localStorage.getItem('tasks'));\n    return savedTasks ? savedTasks : []; // Si no hay tareas, devuelvo un array vacío\n  };\n\n  const [tasks, setTasks] = useState(loadTasks);\n\n  // Guardar las tareas en localStorage cada vez que el estado cambie\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks)); // Guarda el estado en localStorage\n  }, [tasks]);\n\n  const addTask = (taskText) => {\n    const newTask = {\n      id: Date.now(), // Usamos el timestamp como ID único\n      text: taskText,\n      completed: false,\n    };\n    setTasks((prevTasks) => [...prevTasks, newTask]);\n  };\n\n  const toggleTaskCompletion = (id) => {\n    setTasks((prevTasks) =>\n      prevTasks.map((task) =>\n        task.id === id ? { ...task, completed: !task.completed } : task\n      )\n    );\n  };\n\n  const deleteTask = (id) => {\n    setTasks((prevTasks) => prevTasks.filter((task) => task.id !== id));\n  };\n\n  return (\n    <div className=\"App\">\n      <TaskForm onAdd={addTask} />\n      <TaskList tasks={tasks} onToggle={toggleTaskCompletion} onDelete={deleteTask} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACtB,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC5D,OAAOJ,UAAU,GAAGA,UAAU,GAAG,EAAE,CAAC,CAAC;EACvC,CAAC;EAED,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAACQ,SAAS,CAAC;;EAE7C;EACAP,SAAS,CAAC,MAAM;IACdW,YAAY,CAACI,OAAO,CAAC,OAAO,EAAEN,IAAI,CAACO,SAAS,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;EACxD,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMI,OAAO,GAAIC,QAAQ,IAAK;IAC5B,MAAMC,OAAO,GAAG;MACdC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MAAE;MAChBC,IAAI,EAAEL,QAAQ;MACdM,SAAS,EAAE;IACb,CAAC;IACDV,QAAQ,CAAEW,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAEN,OAAO,CAAC,CAAC;EAClD,CAAC;EAED,MAAMO,oBAAoB,GAAIN,EAAE,IAAK;IACnCN,QAAQ,CAAEW,SAAS,IACjBA,SAAS,CAACE,GAAG,CAAEC,IAAI,IACjBA,IAAI,CAACR,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGQ,IAAI;MAAEJ,SAAS,EAAE,CAACI,IAAI,CAACJ;IAAU,CAAC,GAAGI,IAC7D,CACF,CAAC;EACH,CAAC;EAED,MAAMC,UAAU,GAAIT,EAAE,IAAK;IACzBN,QAAQ,CAAEW,SAAS,IAAKA,SAAS,CAACK,MAAM,CAAEF,IAAI,IAAKA,IAAI,CAACR,EAAE,KAAKA,EAAE,CAAC,CAAC;EACrE,CAAC;EAED,oBACEhB,OAAA;IAAK2B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB5B,OAAA,CAACF,QAAQ;MAAC+B,KAAK,EAAEhB;IAAQ;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5BjC,OAAA,CAACH,QAAQ;MAACY,KAAK,EAAEA,KAAM;MAACyB,QAAQ,EAAEZ,oBAAqB;MAACa,QAAQ,EAAEV;IAAW;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7E,CAAC;AAEV,CAAC;AAAC/B,EAAA,CAzCID,GAAG;AAAAmC,EAAA,GAAHnC,GAAG;AA2CT,eAAeA,GAAG;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}