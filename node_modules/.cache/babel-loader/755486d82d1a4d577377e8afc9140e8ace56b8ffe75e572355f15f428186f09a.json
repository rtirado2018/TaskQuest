{"ast":null,"code":"var _jsxFileName = \"/home/rosita/proyectos/nodeJS/gestortareas/src/components/TaskItem.jsx\";\nimport React from 'react';\nimport \"./ItemStyle.css\";\n//esto es algo parecido a una clase, pero no. Pero viene a servir de molde para crear una tarea\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskItem = ({\n  task,\n  onToggle,\n  onDelete,\n  onEdit\n}) =>\n/*#__PURE__*/\n//con sus propiedades\n_jsxDEV(\"li\", {\n  className: \"item\",\n  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"dltButton\",\n    onClick: () => onDelete(task.id),\n    children: \"\\uD83D\\uDDD1\\uFE0F\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"editButton\",\n    onClick: () => {\n      const newText = prompt('Editar tarea:', task.text); // Capturamos el nuevo texto\n      if (newText && newText.trim() !== '') {\n        // Solo pasamos si el texto no est√° vac√≠o\n        onEdit(task.id, newText); // Llama a la funci√≥n de edici√≥n con el id y el nuevo texto\n      } else {\n        alert('No puedes dejar la tarea vac√≠a'); // Mensaje si el nuevo texto es vac√≠o\n      }\n    },\n    children: \"\\uD83D\\uDD8A\\uFE0F Editar\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"checkbox\",\n    checked: task.completed,\n    onChange: () => onToggle(task.id) // Marca como completada\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    style: {\n      textDecorationColor: task.completed ? '#55FF00' : 'none',\n      textDecorationThickness: task.completed ? '4px' : 'none',\n      color: task.completed ? '#ccc' : 'inherit'\n    },\n    children: task.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 3\n}, this);\n_c = TaskItem;\nexport default TaskItem;\nvar _c;\n$RefreshReg$(_c, \"TaskItem\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","TaskItem","task","onToggle","onDelete","onEdit","className","children","onClick","id","fileName","_jsxFileName","lineNumber","columnNumber","newText","prompt","text","trim","alert","type","checked","completed","onChange","style","textDecorationColor","textDecorationThickness","color","_c","$RefreshReg$"],"sources":["/home/rosita/proyectos/nodeJS/gestortareas/src/components/TaskItem.jsx"],"sourcesContent":["import React from 'react';\nimport \"./ItemStyle.css\";\n//esto es algo parecido a una clase, pero no. Pero viene a servir de molde para crear una tarea\n\nconst TaskItem = ({ task, onToggle, onDelete, onEdit }) => (//con sus propiedades\n  <li className=\"item\">\n    \n    {/* Bot√≥n para eliminar */}\n    <button className=\"dltButton\" onClick={() => onDelete(task.id)}>üóëÔ∏è</button> {/* Bot√≥n para eliminar */}\n\n    <button className=\"editButton\" onClick={() => {\n      const newText = prompt('Editar tarea:', task.text); // Capturamos el nuevo texto\n      if (newText && newText.trim() !== '') {  // Solo pasamos si el texto no est√° vac√≠o\n        onEdit(task.id, newText);  // Llama a la funci√≥n de edici√≥n con el id y el nuevo texto\n      } else {\n        alert('No puedes dejar la tarea vac√≠a'); // Mensaje si el nuevo texto es vac√≠o\n      }\n\n\n    }}>\n      üñäÔ∏è Editar\n    </button>\n\n    {/* El checkbox*/}\n    <input\n      type=\"checkbox\"\n      checked={task.completed}\n      onChange={() => onToggle(task.id)} // Marca como completada\n    />\n\n    {/* El subrayado. S√≠, estilos*/}\n    <span style={{\n      \n      textDecorationColor: task.completed ? '#55FF00' : 'none',\n      textDecorationThickness: task.completed ? '4px' : 'none',\n      color: task.completed ? '#ccc' : 'inherit'\n\n    }}>\n      {task.text}\n    </span>\n\n  </li>\n);\n\nexport default TaskItem;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,iBAAiB;AACxB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,IAAI;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC;AAAO,CAAC;AAAA;AAAM;AAC1DL,OAAA;EAAIM,SAAS,EAAC,MAAM;EAAAC,QAAA,gBAGlBP,OAAA;IAAQM,SAAS,EAAC,WAAW;IAACE,OAAO,EAAEA,CAAA,KAAMJ,QAAQ,CAACF,IAAI,CAACO,EAAE,CAAE;IAAAF,QAAA,EAAC;EAAG;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC,KAAC,eAE7Eb,OAAA;IAAQM,SAAS,EAAC,YAAY;IAACE,OAAO,EAAEA,CAAA,KAAM;MAC5C,MAAMM,OAAO,GAAGC,MAAM,CAAC,eAAe,EAAEb,IAAI,CAACc,IAAI,CAAC,CAAC,CAAC;MACpD,IAAIF,OAAO,IAAIA,OAAO,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAAG;QACvCZ,MAAM,CAACH,IAAI,CAACO,EAAE,EAAEK,OAAO,CAAC,CAAC,CAAE;MAC7B,CAAC,MAAM;QACLI,KAAK,CAAC,gCAAgC,CAAC,CAAC,CAAC;MAC3C;IAGF,CAAE;IAAAX,QAAA,EAAC;EAEH;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC,eAGTb,OAAA;IACEmB,IAAI,EAAC,UAAU;IACfC,OAAO,EAAElB,IAAI,CAACmB,SAAU;IACxBC,QAAQ,EAAEA,CAAA,KAAMnB,QAAQ,CAACD,IAAI,CAACO,EAAE,CAAE,CAAC;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC,eAGFb,OAAA;IAAMuB,KAAK,EAAE;MAEXC,mBAAmB,EAAEtB,IAAI,CAACmB,SAAS,GAAG,SAAS,GAAG,MAAM;MACxDI,uBAAuB,EAAEvB,IAAI,CAACmB,SAAS,GAAG,KAAK,GAAG,MAAM;MACxDK,KAAK,EAAExB,IAAI,CAACmB,SAAS,GAAG,MAAM,GAAG;IAEnC,CAAE;IAAAd,QAAA,EACCL,IAAI,CAACc;EAAI;IAAAN,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAEL,CACL;AAACc,EAAA,GAtCI1B,QAAQ;AAwCd,eAAeA,QAAQ;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}