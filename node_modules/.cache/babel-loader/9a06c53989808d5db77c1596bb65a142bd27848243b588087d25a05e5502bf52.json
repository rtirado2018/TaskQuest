{"ast":null,"code":"var _jsxFileName = \"/home/rosita/proyectos/nodeJS/gestortareas/src/components/TaskItem.jsx\";\nimport React from 'react';\nimport \"./ItemStyle.css\";\n//esto es algo parecido a una clase, pero no. Pero viene a servir de molde para crear una tarea\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskItem = ({\n  task,\n  onToggle,\n  onDelete,\n  onEdit\n}) =>\n/*#__PURE__*/\n//con sus propiedades\n_jsxDEV(\"li\", {\n  className: \"item\",\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"taskControls\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"dltButton\",\n      onClick: () => onDelete(task.id),\n      children: \"\\uD83D\\uDDD1\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), \" \", editable && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"editButton\",\n      onClick: () => {\n        const newText = prompt('Editar tarea:', task.text);\n        if (newText && newText.trim() !== '') {\n          onEdit(task.id, newText);\n        } else {\n          alert('No puedes dejar la tarea vac√≠a');\n        }\n      },\n      children: \"\\uD83D\\uDD8A\\uFE0F Editar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: task.completed,\n      onChange: () => onToggle(task.id) // Marca como completada\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"taskText\",\n      style: {\n        textDecorationThickness: task.completed ? '4px' : 'none',\n        color: task.completed ? '#888' : 'inherit'\n      },\n      children: task.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 3\n}, this);\n_c = TaskItem;\nexport default TaskItem;\nvar _c;\n$RefreshReg$(_c, \"TaskItem\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","TaskItem","task","onToggle","onDelete","onEdit","className","children","onClick","id","fileName","_jsxFileName","lineNumber","columnNumber","editable","newText","prompt","text","trim","alert","type","checked","completed","onChange","style","textDecorationThickness","color","_c","$RefreshReg$"],"sources":["/home/rosita/proyectos/nodeJS/gestortareas/src/components/TaskItem.jsx"],"sourcesContent":["import React from 'react';\nimport \"./ItemStyle.css\";\n//esto es algo parecido a una clase, pero no. Pero viene a servir de molde para crear una tarea\n\nconst TaskItem = ({ task, onToggle, onDelete, onEdit }) => (//con sus propiedades\n  <li className=\"item\">\n    <div className=\"taskControls\">\n\n      {/* Bot√≥n para eliminar */}\n      <button className=\"dltButton\" onClick={() => onDelete(task.id)}>üóëÔ∏è</button> {/* Bot√≥n para eliminar */}\n\n\n      {editable && (\n        <button\n          className=\"editButton\"\n          onClick={() => {\n            const newText = prompt('Editar tarea:', task.text);\n            if (newText && newText.trim() !== '') {\n              onEdit(task.id, newText);\n            } else {\n              alert('No puedes dejar la tarea vac√≠a');\n            }\n          }}\n        >\n          üñäÔ∏è Editar\n        </button>\n      )}\n\n      {/* El checkbox*/}\n      <input\n        type=\"checkbox\"\n        checked={task.completed}\n        onChange={() => onToggle(task.id)} // Marca como completada\n      />\n\n      {/* El subrayado. S√≠, estilos*/}\n      <span className=\"taskText\" style={{\n\n\n        textDecorationThickness: task.completed ? '4px' : 'none',\n        color: task.completed ? '#888' : 'inherit'\n      }}>\n        {task.text}\n      </span>\n\n    </div>\n  </li>\n);\n\nexport default TaskItem;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,iBAAiB;AACxB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,IAAI;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC;AAAO,CAAC;AAAA;AAAM;AAC1DL,OAAA;EAAIM,SAAS,EAAC,MAAM;EAAAC,QAAA,eAClBP,OAAA;IAAKM,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAG3BP,OAAA;MAAQM,SAAS,EAAC,WAAW;MAACE,OAAO,EAAEA,CAAA,KAAMJ,QAAQ,CAACF,IAAI,CAACO,EAAE,CAAE;MAAAF,QAAA,EAAC;IAAG;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,KAAC,EAG5EC,QAAQ,iBACPd,OAAA;MACEM,SAAS,EAAC,YAAY;MACtBE,OAAO,EAAEA,CAAA,KAAM;QACb,MAAMO,OAAO,GAAGC,MAAM,CAAC,eAAe,EAAEd,IAAI,CAACe,IAAI,CAAC;QAClD,IAAIF,OAAO,IAAIA,OAAO,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UACpCb,MAAM,CAACH,IAAI,CAACO,EAAE,EAAEM,OAAO,CAAC;QAC1B,CAAC,MAAM;UACLI,KAAK,CAAC,gCAAgC,CAAC;QACzC;MACF,CAAE;MAAAZ,QAAA,EACH;IAED;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACT,eAGDb,OAAA;MACEoB,IAAI,EAAC,UAAU;MACfC,OAAO,EAAEnB,IAAI,CAACoB,SAAU;MACxBC,QAAQ,EAAEA,CAAA,KAAMpB,QAAQ,CAACD,IAAI,CAACO,EAAE,CAAE,CAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC,eAGFb,OAAA;MAAMM,SAAS,EAAC,UAAU;MAACkB,KAAK,EAAE;QAGhCC,uBAAuB,EAAEvB,IAAI,CAACoB,SAAS,GAAG,KAAK,GAAG,MAAM;QACxDI,KAAK,EAAExB,IAAI,CAACoB,SAAS,GAAG,MAAM,GAAG;MACnC,CAAE;MAAAf,QAAA,EACCL,IAAI,CAACe;IAAI;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEJ;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACJ,CACL;AAACc,EAAA,GA3CI1B,QAAQ;AA6Cd,eAAeA,QAAQ;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}