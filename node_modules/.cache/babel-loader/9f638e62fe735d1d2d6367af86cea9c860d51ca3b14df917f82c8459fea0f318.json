{"ast":null,"code":"var _jsxFileName = \"/home/rosita/proyectos/nodeJS/gestortareas/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TaskForm from './components/TaskForm';\nimport TaskList from './components/TaskList';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [tasks, setTasks] = useState([]); // Estado para las tareas\n\n  useEffect(() => {\n    // Cargar las tareas desde localStorage al iniciar\n    const storedTasks = JSON.parse(localStorage.getItem('tasks')) || [];\n    console.log('Tareas cargadas desde localStorage:', storedTasks); // Ver las tareas cargadas\n    setTasks(storedTasks);\n  }, []); // Este useEffect solo se ejecuta una vez al inicio\n\n  useEffect(() => {\n    // Guardar las tareas en localStorage cuando cambien\n    setTimeout(() => {\n      console.log('Tareas guardadas en localStorage:', tasks); // Ver qué tareas se están guardando\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n    }, 100); // 100ms de retraso (ajusta si es necesario)\n  }, [tasks]);\n  const addTask = text => {\n    //Funcion de añadido\n    const newTask = {\n      id: Date.now(),\n      text,\n      completed: false\n    };\n    setTasks(prevTasks => [...prevTasks, newTask]); // Asegúrate de que no estás sobrescribiendo las tareas\n  };\n  const toggleTask = id => {\n    //Funcion de checkeo\n    setTasks(tasks.map(task => task.id === id ? {\n      ...task,\n      completed: !task.completed\n    } : task));\n  };\n  const deleteTask = id => {\n    //Funcion de borrado\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n  const editTask = (id, newText) => {\n    setTasks(tasks.map(task => task.id === id ? {\n      ...task,\n      text: newText\n    } : task));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Gestor de Tareas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n        onAdd: addTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n        tasks: tasks,\n        onToggle: toggleTask,\n        onDelete: deleteTask,\n        onEdit: editTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"weOf0VesAdD4xw+rXOOhYK4d8/M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TaskForm","TaskList","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","storedTasks","JSON","parse","localStorage","getItem","console","log","setTimeout","setItem","stringify","addTask","text","newTask","id","Date","now","completed","prevTasks","toggleTask","map","task","deleteTask","filter","editTask","newText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAdd","onToggle","onDelete","onEdit","_c","$RefreshReg$"],"sources":["/home/rosita/proyectos/nodeJS/gestortareas/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TaskForm from './components/TaskForm';\nimport TaskList from './components/TaskList';\nimport \"./App.css\";\n\nconst App = () => {\n  const [tasks, setTasks] = useState([]); // Estado para las tareas\n\n  useEffect(() => {\n    // Cargar las tareas desde localStorage al iniciar\n    const storedTasks = JSON.parse(localStorage.getItem('tasks')) || [];\n    console.log('Tareas cargadas desde localStorage:', storedTasks);  // Ver las tareas cargadas\n    setTasks(storedTasks);\n  }, []);  // Este useEffect solo se ejecuta una vez al inicio\n  \n  useEffect(() => {\n    // Guardar las tareas en localStorage cuando cambien\n    setTimeout(() => {\n      console.log('Tareas guardadas en localStorage:', tasks);  // Ver qué tareas se están guardando\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n    }, 100);  // 100ms de retraso (ajusta si es necesario)\n  }, [tasks]);\n  \n  \n\n\n\n  const addTask = (text) => {//Funcion de añadido\n    const newTask = { id: Date.now(), text, completed: false };\n    setTasks(prevTasks => [...prevTasks, newTask]);  // Asegúrate de que no estás sobrescribiendo las tareas\n  };\n  \n\n  const toggleTask = (id) => {//Funcion de checkeo\n    setTasks(\n      tasks.map(task =>\n        task.id === id ? { ...task, completed: !task.completed } : task\n      )\n    );\n  };\n\n  const deleteTask = (id) => {//Funcion de borrado\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  const editTask = (id, newText) => {\n    setTasks(\n      tasks.map(task =>\n        task.id === id ? { ...task, text: newText } : task\n      )\n    );\n  };\n\n  return (\n    <div className=\"mainContainer\">\n      <h1>Gestor de Tareas</h1>\n      <div className='container'>\n      <TaskForm onAdd={addTask} />{/*Llamamos al cuadro de texto de TaskForm*/}\n      <TaskList tasks={tasks} onToggle={toggleTask} onDelete={deleteTask} onEdit={editTask} />{/* Lista, Checkeo y boton Delete de TaskList*/}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}